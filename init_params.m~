%% init_params.m
%
% Description:
%   Initializes the values of many parameters, such as parameters in the
%   system dynamics, parameters that relate to simulating the system
%   forward in time, and parametes that relate to visualization/animation.
%   
% Inputs:
%   none

% Outputs:
%   params: a struct with many elements

function params = init_params
    % geometrical parameters (meters):
    params.model.geom.foot.htop = 0.05; % height from CoM to pivot
    params.model.geom.foot.hbot = 0.05; % height from base of foot to COM
    params.model.geom.foot.w = 0.1/sqrt(3);    % half-width of foot
    params.model.geom.spine.h = 0.45;   % height of spine
    params.model.geom.spine.w = 0.02;   % width of spine
    params.model.geom.spine.l = params.model.geom.spine.h/2;   % distance from pivot to CoM
    params.model.geom.body.h = 0.07; % height of the body
    params.model.geom.body.w = 0.14;   % width of the body
    params.model.geom.body.pb = 0;  %params.model.geom.body.w/4; % offset of body CoM
    params.model.geom.body.r = 0.0012; % radius of the pinion
    params.model.geom.track.r = 1.5;  % radius of the track
        
    % parameters relating to inertia and potential energy:
    params.model.dyn.foot.m = 0.2;    % kg -- mass of the foot
    params.model.dyn.foot.J = params.model.dyn.foot.m*params.model.geom.foot.w^2/3; % kg-m^2  inertia of foot about CG
    params.model.dyn.spine.m = 0.1;    % mass of the spine
    params.model.dyn.spine.J = params.model.dyn.spine.m*(params.model.geom.spine.h^2 + params.model.geom.spine.w^2)/12;
    params.model.dyn.body.m = 2.5;  % kg -- most of the mass is concentrated in the body
    params.model.dyn.body.J = params.model.dyn.body.m*(params.model.geom.body.h^2 + params.model.geom.body.w^2)/12;
    params.model.dyn.body.Jm = 53.8e-7; % kg-m^2  moment of inertia of Maxon EC40 motor
    params.model.dyn.K = 10;        % Nm/rad rotational stiffness of spring
    params.model.dyn.g = 9.81;      % acceleration due to gravity
    
    % parameters related to simulating (integrating) the dynamics forward
    % in time:
    theta = asin(params.model.geom.foot.w/params.model.geom.track.r);
    params.sim.ICs.track.sl = -params.model.geom.track.r*theta;
    params.sim.ICs.track.sr = params.model.geom.track.r*theta;
    params.sim.ICs.foot.x = 0;      % initial foot x position 
    params.sim.ICs.foot.z = params.model.geom.foot.hbot + params.model.geom.track.r*(1-cos(theta));  % initial foot z position
    params.sim.ICs.foot.theta = 0;  % initial foot angle
    params.sim.ICs.spine.theta = 0; % initial spine angle relative to foot
    params.sim.ICs.body.theta = params.model.geom.body.h/params.model.geom.body.r/2;  % initial motor angle
    params.sim.ICs.foot.xdot = 0.1;   % initial foot x velocity
    params.sim.ICs.foot.zdot = 0;   % initial foot z velocity
    params.sim.ICs.foot.thetadot = 0;  % initial foot angular velocity
    params.sim.ICs.spine.thetadot = 0; % initial spine angular velocity relative to foot
    params.sim.ICs.body.thetadot = 0;  % initial motor angular velocity
    params.sim.tfinal = 1.5;           % simulation final time
    params.sim.dt = 0.002;           % simulation timestep
    
    % package these up
    params.x_IC = [params.sim.ICs.foot.x;
                    params.sim.ICs.foot.z;
                    params.sim.ICs.foot.theta;
                    params.sim.ICs.spine.theta;
                    params.sim.ICs.body.theta;
                    params.sim.ICs.foot.xdot;
                    params.sim.ICs.foot.zdot;
                    params.sim.ICs.foot.thetadot;
                    params.sim.ICs.spine.thetadot;
                    params.sim.ICs.body.thetadot;
                    params.sim.ICs.track.sl;
                    params.sim.ICs.track.sr];

    % variables related to the constraints
    % list of *unilateral* constraints: [left foot, right foot]   1 if active; 0 if inactive
    params.sim.constraints.active = logical([1 1 0 0]);   % [c_lf; c_rf; c_top; c_bot] initially, both left and right foot constraints are active, but the spine constraints are not
    params.sim.constraints.restitution = [0.0, 0.0, 0.0, 0.0];   % coefficients of restitution of the unilateral constraints
    params.sim.constraints.gain = 1;
    
    % parameters relating to the motors
    params.motor.spine.peaktorque = 1.0; % Nm  assumes Maxon EC40 and 3.3x gear ratio
    params.motor.body.peaktorque = 0.3; % Nm  assumes Maxon EC40
    % motor torques over time:
        % create a timeline for use here
        tfinal = params.sim.tfinal;
        dt = params.sim.dt;
    % push the spine cw against the spring
    params.motor.spine.time = 0:dt:tfinal;
    params.motor.spine.torque = 0*params.motor.spine.peaktorque*ones(1,length(params.motor.spine.time)); % push the spine cw against the spring
    params.motor.spine.torque(1) = 0;  % make the initial torque zero
    % push the body upward as hard as possible then brake
    params.motor.body.time1 = 0:dt:.183;
    params.motor.body.torque1 = params.motor.body.peaktorque*ones(1,length(params.motor.body.time1)); 
    params.motor.body.torque1(1) = params.model.dyn.body.m*params.model.dyn.g*params.model.geom.body.r;  % make the initial torque enough to hold up body
    params.motor.body.time2 = .183+dt:dt:.25;
    params.motor.body.torque2 = -2*params.motor.body.peaktorque*ones(1,length(params.motor.body.time2));
    params.motor.body.time3 = .25+dt:dt:tfinal;
    params.motor.body.torque3 = .2*params.model.dyn.body.m*params.model.dyn.g*params.model.geom.body.r*ones(1,length(params.motor.body.time3));
    params.motor.body.time = horzcat(params.motor.body.time1,params.motor.body.time2,params.motor.body.time3);
    params.motor.body.torque = horzcat(params.motor.body.torque1,params.motor.body.torque2,params.motor.body.torque3);
    
    % parameters related to plotting and animation
    params.viz.colors.foot = [1.0 166/255 0.0];
    params.viz.colors.spine = [0.5 1.0 0.0];
    params.viz.colors.body = [153/255,153/255,153/255];
    params.viz.colors.com = [1 1 1];
    params.viz.colors
    params.viz.colors.tracers.foot_com = 'r';
    params.viz.colors.tracers.body_com = 'b';
    params.viz.colors.tracers.spine_tip = 'g';
    params.viz.colors.vectors = 'k';
    params.viz.axis_lims = [-1,1,-0.5,1.5];
    params.viz.dt = 0.01; % timestep for animation
    
    % home shape/configuration of foot with CoM at origin
    params.foot.home.top.x             = 0;
    params.foot.home.top.z             = params.model.geom.foot.htop;

    params.foot.home.low_left.x        = -params.model.geom.foot.w;
    params.foot.home.low_left.z        = -params.model.geom.foot.hbot;

    params.foot.home.low_right.x       = params.model.geom.foot.w;
    params.foot.home.low_right.z       = -params.model.geom.foot.hbot;

    params.foot.home.corners           = horzcat([params.foot.home.top.x; params.foot.home.top.z; 1],...
                                            [params.foot.home.low_left.x; params.foot.home.low_left.z; 1],...
                                            [params.foot.home.low_right.x; params.foot.home.low_right.z; 1]);

    % home shape/configuration of spine with CoM at origin
    params.spine.home.upp_left.x    = -0.5*params.model.geom.spine.w;
    params.spine.home.upp_left.z    = params.model.geom.spine.h - params.model.geom.spine.l;

    params.spine.home.upp_right.x   = 0.5*params.model.geom.spine.w;
    params.spine.home.upp_right.z   = params.spine.home.upp_left.z;

    params.spine.home.low_right.x   = 0.5*params.model.geom.spine.w;
    params.spine.home.low_right.z   = -params.model.geom.spine.l;

    params.spine.home.low_left.x    = -0.5*params.model.geom.spine.w;
    params.spine.home.low_left.z    = -params.model.geom.spine.l;

    params.spine.home.corners = horzcat([params.spine.home.upp_left.x; params.spine.home.upp_left.z; 1],...
                                [params.spine.home.upp_right.x; params.spine.home.upp_right.z; 1],...
                                [params.spine.home.low_right.x; params.spine.home.low_right.z; 1],...
                                [params.spine.home.low_left.x;  params.spine.home.low_left.z; 1]);

    % "home" shape/configuration of body with CoM at origin:
    params.body.home.upp_left.x    = -0.5*params.model.geom.body.w + params.model.geom.body.pb;
    params.body.home.upp_left.z    = 0.5*params.model.geom.body.h;

    params.body.home.upp_right.x   = 0.5*params.model.geom.body.w + params.model.geom.body.pb;
    params.body.home.upp_right.z   = 0.5*params.model.geom.body.h;

    params.body.home.low_right.x   = 0.5*params.model.geom.body.w + params.model.geom.body.pb;
    params.body.home.low_right.z   = -0.5*params.model.geom.body.h;

    params.body.home.low_left.x    = -0.5*params.model.geom.body.w + params.model.geom.body.pb;
    params.body.home.low_left.z    = -0.5*params.model.geom.body.h;

    params.body.home.corners = horzcat([params.body.home.upp_left.x; params.body.home.upp_left.z;   1],...
                                [params.body.home.upp_right.x; params.body.home.upp_right.z; 1],...
                                [params.body.home.low_right.x; params.body.home.low_right.z; 1],...
                                [params.body.home.low_left.x;  params.body.home.low_left.z;  1]);
                                        
end