%% constraint_derivatives.m
%
% Description:
%   Wrapper function for autogen_constraint_derivatives.m
%   Computes the constraint jacobian and hessians for the jumping robot.
%
% Inputs:
%   x: the state vector, x = [q; q_dot];
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   A_all: a 6x5 jacobian of constraint equation derivatives.  If only a
%   subset of constraints are active, then only those rows of A_all will be
%   used to compute the A matrix for that situation.
%
%   Hessian is a 5x5x6 array of constraint second derivatives.

function [A_bilateral,A_unilateral,Hessian_bilateral,Hessian_unilateral] = constraint_derivatives(x,params)

theta_f = x(3);

h_f = params.model.geom.foot.hbot;
w_f = params.model.geom.foot.w;
r = params.model.geom.body.r;

[A_bilateral,A_unilateral,H_clx,H_crx,H_clz,H_crz,H_ctop,H_cbot] = autogen_constraint_derivatives(h_f,r,theta_f,w_f);
Hessian_bilateral = cat(3,H_clx,H_crx);  % concatenate along the third dimension
Hessian_unilateral = cat(3,H_clz,H_crz,H_ctop,H_cbot);  

end

