%% constraint_forces.m
%
% Description:
%   function that sorts the constraint forces into a 6x1 vector
%
% Inputs:
%   F_active: the active forces as computed by robot_dynamics
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   F: a 6x1 vector of constraint forces

function [F] = constraint_forces(F_active,params)

F = zeros(6,1);  % F = [F_lx;F_rx;F_lz;F_rz;F_top;F_bot]

if sum(F_active) ~= 0
    
    i_force = 0;
    % add in the unilateral forces
    for ic = 1:4  % cycle through the unilateral constraints
        if params.sim.constraints.uni(ic) == 1  % if a constraint is active, assign a force
            i_force = i_force + 1;
            F(ic+2) = F_active(i_force);
        end
    end
    
    % add in the bilateral forces
    if params.sim.constraints.uni(1) == 1 && params.sim.constraints.uni(2) == 1  % both feet are touching, distribute the bilateral force
        F(1) = F_active(i_force+1)*F(3)/(F(3) + F(4));
        F(2) = F_active(i_force+1)*F(4)/(F(3) + F(4));
    elseif params.sim.constraints.uni(1) == 1  % if only the left foot is touching...
        F(1) = F_active(i_force+1);  % the bilateral force acts only on the left foot 
    elseif params.sim.constraints.uni(2) == 1  % if only the right foot is touching...
        F(2) = F_active(i_force+1);  % the bilateral force acts only on the right foot
    end

end

end


