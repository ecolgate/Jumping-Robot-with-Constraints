%% main.m
%
% Description:
%   Application entry point.
%
% Inputs: none
%
% Outputs: none
%
% Notes:

function main

%% Initialize environment
clear;
close all;
clc;

init_env();

%% Initialize parameters
params = init_params;

%% Set up events using odeset
options = odeset('Events',@robot_events);

%% Simulate the robot forward in time 
x_IC = params.x_IC';    % initial conditions
tnow = 0.0;             % starting time

% start with null matrices for holding results -- we'll be adding to these
% with each segment of the simulation
tsim = [];
xsim = [];
F_list = [];

% create a place for constraint forces
F = [];

while tnow < params.sim.tfinal

    tspan = [tnow params.sim.tfinal];
    [tseg, xseg, ~, ~, ie] = ode45(@robot_dynamics, tspan, x_IC, options);

    % augment tsim and xsim; renew ICs
    tsim = [tsim;tseg];
    xsim = [xsim;xseg];
    tnow = tsim(end);
    x_IC = xsim(end,:); 
    
    % compute the constraint forces that were active during the jump
    [Fseg] = constraint_forces(tseg,xseg',params);
    F_list = [F_list,Fseg];
    
    % if simulation terminated before tfinal, determine which constaints
    % are still active, then continue integration
    if tseg(end) < params.sim.tfinal  % termination was triggered by an event
        switch params.sim.constraints
            case ['true','false']  % the left foot was on the ground prior to termination
                 params.sim.constraints = ['false','false'];  % now the left foot is off
            case ['false','true'] % the right foot only was on the ground prior to termination
                 params.sim.constraints = ['false','false'];  % now the right foot is off
            case ['true','true'] % both feet were on the ground prior to termination
                 if ie == 1
                    params.sim.constraints = ['false','true'];  % now the left foot is off
                 else
                    params.sim.constraints = ['true','false'];  % now the right foot is off
                 end
        end
    end
end

%%  Plot Results %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Begin with plot of ground reaction versus weight, to be sure we're
% pushing off and then leaving the ground
figure;
plot(tsim,F_list(2,:)+F_list(4,:),'b-','LineWidth',2);
hold on
weight = (params.model.dyn.foot.m+params.model.dyn.spine.m+params.model.dyn.body.m)*params.model.dyn.g*ones(1,length(tsim));
plot(tsim,weight,'r-','LineWidth',1);
ylabel('Ground Reaction vs Weight (N)')
xlabel('time (sec)')
hold off

pause;

% Now let's animate

% Let's resample the simulator output so we can animate with evenly-spaced
% points in (time,state).
% 1) deal with possible duplicate times in tsim:
% (https://www.mathworks.com/matlabcentral/answers/321603-how-do-i-interpolate-1d-data-if-i-do-not-have-unique-values
tsim = cumsum(ones(size(tsim)))*eps + tsim;

% 2) resample the duplicate-free time vector:
t_anim = 0:params.viz.dt:tsim(end);

% 3) resample the state-vs-time array:
x_anim = interp1(tsim,xsim,t_anim);
x_anim = x_anim'; % transpose so that xsim is 10xN (N = number of timesteps)

% 4) resample the constraint forces-vs-time array:
F_anim = interp1(tsim,F_list',t_anim);
F_anim = F_anim';

animate_robot(x_anim(1:5,:),F_anim,params,'trace_foot_com',true,...
    'trace_body_com',true,'trace_spine_tip',true,'show_constraint_forces',true,'video',true);
fprintf('Done!\n');

%% BELOW HERE ARE THE NESTED FUNCTIONS, ROBOT_DYNAMICS AND ROBOT_EVENTS
%% THEY HAVE ACCESS TO ALL VARIABLES IN MAIN

%% robot_dynamics.m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Description:
%   Computes the constraint forces: 
%       Fnow = inv(A*Minv*A')*(A*Minv*(Q-H) + Adotqdot)
%
%   Also computes the derivative of the state:
%       x_dot(1:5) = (I - A'*inv(A*A')*A)*x(6:10)
%       x_dot(6:10) = inv(M)*(Q - H - A'F)
%
% Inputs:
%   t: time (scalar)
%   x: the 10x1 state vector
%   params: a struct with many elements, generated by calling init_params.m
%
% Outputs:
%   dx: derivative of state x with respect to time.

function [dx] = robot_dynamics(t,x)

% for convenience, define q_dot
dx = zeros(numel(x),1);
nq = numel(x)/2;    % assume that x = [q;q_dot];
q_dot = x(nq+1:2*nq);

% solve for control inputs at this instant
tau_s = interp1(params.motor.spine.time,params.motor.spine.torque,t);
tau_m = interp1(params.motor.body.time,params.motor.body.torque,t);
Q = [0;0;0;tau_s;tau_m];

% find the parts that don't depend on constraint forces
H = H_eom(x,params);
Minv = inv_mass_matrix(x,params);
[A_all,Hessian] = constraint_derivatives(x,params);

% build the constraints, forces, and solve for acceleration 
switch params.sim.constraints  
    case ['false','false']     % both feet are off the ground
        dx(1:nq) = q_dot;
        dx(nq+1:2*nq) = Minv*(Q - H);
        F = [0;0;0;0];
    case ['true','false']      % left foot is on the ground and right is off
        A = A_all([1,2],:);
        Adotqdot = [q_dot'*Hessian(:,:,1)*q_dot;
                    q_dot'*Hessian(:,:,2)*q_dot ];
        Fnow = (A*Minv*A')\(A*Minv*(Q - H) + Adotqdot);
        dx(1:nq) = (eye(nq) - A'*(A*A')\A)*x(6:10);
        dx(nq+1:2*nq) = Minv*(Q - H - A'*Fnow);
        F = [Fnow;0;0];
    case ['false','true']      % right foot is on the ground and left is off
        A = A_all([3,4],:);
        Adotqdot = [q_dot'*Hessian(:,:,3)*q_dot;
                    q_dot'*Hessian(:,:,4)*q_dot ];
        Fnow = (A*Minv*A')\(A*Minv*(Q - H) + Adotqdot);
        dx(1:nq) = (eye(nq) - A'*(A*A')\A)*x(6:10);
        dx(nq+1:2*nq) = Minv*(Q - H - A'*Fnow);
        F = [0;0;Fnow];
    case ['true','true']      % both feet are on the ground
        A = A_all([1,2,4],:);
        Adotqdot = [q_dot'*Hessian(:,:,1)*q_dot;
                    q_dot'*Hessian(:,:,2)*q_dot;
                    q_dot'*Hessian(:,:,4)*q_dot ];
        Fnow = (A*Minv*A')\(A*Minv*(Q - H) + Adotqdot);
        dx(1:nq) = (eye(nq) - A'*(A*A')*A)*x(6:10);
        dx(nq+1:2*nq) = Minv*(Q - H - A'*Fnow);
        F = [Fnow(1);Fnow(2);0;Fnow(3)];
end

end
%% end of robot_dynamics.m


%% Event function for ODE45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Description:
%   Event function that is called when a constraint becomes inactive (or, in the future, active) 
%
% Inputs:
%   t and x are required, but not used
%   F is shared with parent function
%
% Outputs:
%   value
%   isterminal
%   direction
function [value,isterminal,direction] = robot_events(~,~)

    switch params.sim.constraints  
        case ['false','false']      % both feet are off the ground
            value = 1;
            isterminal = 0;
            direction = 0;
        case ['true','false']      % left foot is on the ground and right is off
            value = F(2);
            isterminal = 1;
            direction = -1;
        case ['false','true']      % right foot is on the ground and left is off
            value = F(4);
            isterminal = 1;
            direction = -1;
        case ['true','true']      % both feet are on the ground
            value = [F(2);F(4)];
            isterminal = ones(2,1);
            direction = -ones(2,1);
    end


end
%% end of robot_events.m 


end
%% End of main.m